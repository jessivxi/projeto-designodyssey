{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 6, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}},
    {"offset": {"line": 124, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dell/Documents/Curso/projeto-designodyssey/src/app/api/auth/route.js"],"sourcesContent":["import nextConnect from 'next-connect';\r\nimport session from 'express-session';\r\n\r\nconst apiRoute = nextConnect({\r\n    onError(error, req, res) {\r\n        res.status(501).json({\r\n            error: `Sorry, something happened! ${error.message}`\r\n        });\r\n    },\r\n    onNoMatch(req, res) {\r\n        res.status(405).json({\r\n            error: `Method '${req.method}' Not Allowed`\r\n        });\r\n    }\r\n});\r\n\r\napiRoute.use(session({\r\n    secret: 'your-secret-key',\r\n    resave: false,\r\n    saveUninitialized: true,\r\n    cookie: { secure: false }\r\n}));\r\n\r\napiRoute.post(async (req, res) => {\r\n    const { email, password } = req.body;\r\n\r\n    try {\r\n        // Chamada para a API PHP de verificação\r\n        const response = await fetch('http://localhost/dashboard/api-designOdyssey/usuarios/post.php', {\r\n            method: 'POST',\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify({ email, senha: password })\r\n        });\r\n\r\n        const data = await response.json();\r\n\r\n        if (response.ok) {\r\n            req.session.user = {\r\n                id: data.id,\r\n                nome: data.nome,\r\n                email: data.email,\r\n                tipo: data.tipo\r\n            };\r\n            res.status(200).json({\r\n                message: 'Logged in successfully',\r\n                user: req.session.user\r\n            });\r\n        } else {\r\n            res.status(401).json({\r\n                error: data.erro || 'Invalid credentials'\r\n            });\r\n        }\r\n    } catch (error) {\r\n        res.status(500).json({\r\n            error: `Login error: ${error.message}`\r\n        });\r\n    }\r\n});\r\n\r\napiRoute.delete((req, res) => {\r\n    req.session.destroy(err => {\r\n        if (err) {\r\n            return res.status(500).json({\r\n                error: 'Unable to logout'\r\n            });\r\n        }\r\n        res.status(200).json({\r\n            message: 'Logged out successfully'\r\n        });\r\n    });\r\n});\r\n\r\nexport default apiRoute;"],"names":[],"mappings":";;;AAAA;AACA;;;AAEA,MAAM,WAAW,CAAA,GAAA,0KAAA,CAAA,UAAW,AAAD,EAAE;IACzB,SAAQ,KAAK,EAAE,GAAG,EAAE,GAAG;QACnB,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YACjB,OAAO,CAAC,2BAA2B,EAAE,MAAM,OAAO,EAAE;QACxD;IACJ;IACA,WAAU,GAAG,EAAE,GAAG;QACd,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YACjB,OAAO,CAAC,QAAQ,EAAE,IAAI,MAAM,CAAC,aAAa,CAAC;QAC/C;IACJ;AACJ;AAEA,SAAS,GAAG,CAAC,CAAA,GAAA,6IAAA,CAAA,UAAO,AAAD,EAAE;IACjB,QAAQ;IACR,QAAQ;IACR,mBAAmB;IACnB,QAAQ;QAAE,QAAQ;IAAM;AAC5B;AAEA,SAAS,IAAI,CAAC,OAAO,KAAK;IACtB,MAAM,EAAE,KAAK,EAAE,QAAQ,EAAE,GAAG,IAAI,IAAI;IAEpC,IAAI;QACA,wCAAwC;QACxC,MAAM,WAAW,MAAM,MAAM,kEAAkE;YAC3F,QAAQ;YACR,SAAS;gBACL,gBAAgB;YACpB;YACA,MAAM,KAAK,SAAS,CAAC;gBAAE;gBAAO,OAAO;YAAS;QAClD;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,IAAI,SAAS,EAAE,EAAE;YACb,IAAI,OAAO,CAAC,IAAI,GAAG;gBACf,IAAI,KAAK,EAAE;gBACX,MAAM,KAAK,IAAI;gBACf,OAAO,KAAK,KAAK;gBACjB,MAAM,KAAK,IAAI;YACnB;YACA,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBACjB,SAAS;gBACT,MAAM,IAAI,OAAO,CAAC,IAAI;YAC1B;QACJ,OAAO;YACH,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBACjB,OAAO,KAAK,IAAI,IAAI;YACxB;QACJ;IACJ,EAAE,OAAO,OAAO;QACZ,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YACjB,OAAO,CAAC,aAAa,EAAE,MAAM,OAAO,EAAE;QAC1C;IACJ;AACJ;AAEA,SAAS,MAAM,CAAC,CAAC,KAAK;IAClB,IAAI,OAAO,CAAC,OAAO,CAAC,CAAA;QAChB,IAAI,KAAK;YACL,OAAO,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;gBACxB,OAAO;YACX;QACJ;QACA,IAAI,MAAM,CAAC,KAAK,IAAI,CAAC;YACjB,SAAS;QACb;IACJ;AACJ;uCAEe","debugId":null}}]
}